syntax = "proto3";

package sanctify.pb;

/*************************************************\
 *   Sanctify game networking protocol buffers   *
 *                                               *
 * Below is an enumeration of possible messages  *
 *  that are sent between the client and server  *
 *  in a Sanctify game match                     *
\*************************************************/

/**
 * Initial connection message - use to authenticate the connecting client as a certain user.
 */
message InitialConnectionRequest {
  // Token that both authenticates the player and serves and identifies the game
  //  which they have been given permission to join. Check against an external service
  //  usually.
  string player_token = 1;
}

message InitialConnectionResponse {
  enum ResponseType {
    UNKNOWN = 0;
    ACCEPTED = 1;
    INVALID_TOKEN = 2;
    TIMEOUT = 3;
    BAD_FORMAT = 4;
  }

  ResponseType response_type = 1;

  // TODO (sessamekesh): enumerate which resources the client should preload
}

//
// Gameplay messages (client events)
//

// Message that gets sent when the player presses a location on the map to travel to
message TravelToLocationRequest {
  float x = 1;
  float y = 2;
}

message MapPosition {
  float x = 1;
  float y = 2;
}

//
// Gameplay State Updates (server events)
//
message PlayerLocomotionState {
  TravelToLocationRequest target_location = 1;
  float speed = 2;
}

message PlayerSingleState {
  oneof msg_body {
    MapPosition current_position = 1;
    PlayerLocomotionState locomotion_state = 2;
  }
}

message PlayerStateUpdate {
  int32 player_id = 1;
  repeated PlayerSingleState player_states = 2;
}

message GameServerSingleMessage {
  oneof msg_body {
    PlayerStateUpdate player_state_update = 1;
  }
}

message GameServerActionsList {
  repeated GameServerSingleMessage messages = 1;
}

/*********************************************************
 * Union of all messages that a server can send to a client
 *********************************************************/
message GameServerMessage {
  // Magic number that verifies that this is a valid GameServerMessage
  uint32 magic_number = 1;

  oneof msg_body {
    InitialConnectionResponse initial_connection_response = 2;
    GameServerActionsList actions_list = 3;
  }
}

/***********************************************************
 * Union of all messages that a client can send to a server
 **********************************************************/
message GameClientSingleMessage {
  oneof msg_body {
    TravelToLocationRequest travel_to_location_request = 1;
  }
}

message GameClientActionsList {
  repeated GameClientSingleMessage actions = 1;
}

message GameClientMessage {
  // Magic number that verifies that this is a valid GameClientMessage
  uint32 magic_header = 1;

  oneof msg_body {
    InitialConnectionRequest initial_connection_request = 2;
    GameClientActionsList game_client_actions_list = 3;
  }
}