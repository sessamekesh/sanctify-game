syntax = "proto3";

package sanctify.pb;

/*************************************************\
 *   Sanctify game networking protocol buffers   *
 *                                               *
 * Below is an enumeration of possible messages  *
 *  that are sent between the client and server  *
 *  in a Sanctify game match                     *
\*************************************************/

/**
 * Initial connection message - use to authenticate the connecting client as a certain user.
 */
message InitialConnectionRequest {
  // Token that both authenticates the player and serves and identifies the game
  //  which they have been given permission to join. Check against an external service
  //  usually.
  string player_token = 1;
}

message InitialConnectionResponse {
  enum ResponseType {
    UNKNOWN = 0;
    ACCEPTED = 1;
    INVALID_TOKEN = 2;
    TIMEOUT = 3;
    BAD_FORMAT = 4;
  }

  ResponseType response_type = 1;

  // TODO (sessamekesh): enumerate which resources the client should preload
}

//
// Shared messages (primitives)
//
message Vec2 {
  float x = 1;
  float y = 2;
}

//
// Component types
//
message MapLocation {
  Vec2 location = 1;
}

message NavWaypointList {
  repeated Vec2 nav_waypoints = 1;
}

message StandardNavigationParams {
  float movement_speed = 1;
}

//
// Gameplay messages (client events)
//
message PlayerMovement {
  Vec2 destination = 1;
}

message SnapshotReceived {
  uint32 snapshot_id = 1;
}

//
// Gameplay State Updates (server events)
//
message ComponentData {
  // Optional component data - all enumerated here! Each field is optional
  MapLocation map_location = 1;
  NavWaypointList nav_waypoints = 2;
  StandardNavigationParams standard_navigation_params = 3;
}

message GameEntity {
  uint32 net_sync_id = 1;
  ComponentData component_data = 2;
}

message GameSnapshotFull {
  float game_time = 1;
  uint32 snapshot_id = 2;
  repeated GameEntity game_entities = 3;
}

message GameEntityUpdateMask {
  enum ComponentType {
    // This should never be observed - it may indicate an error state in the future
    INVALID = 0;

    MAP_LOCATION = 1;
    NAV_WAYPOINTS = 2;
    STANDARD_NAVIGATION_PARAMS = 3;
  }

  uint32 net_sync_id = 1;
  ComponentData upsert_components = 2;
  repeated ComponentType remove_components = 3;
}

message GameSnapshotDiff {
  float game_time = 1;
  uint32 base_snapshot_id = 2;
  uint32 dest_snapshot_id = 3;
  repeated GameEntityUpdateMask upsert_entities = 4;
  repeated uint32 remove_entities = 5;
}

message GameServerSingleMessage {
  oneof msg_body {
    GameSnapshotFull game_snapshot_full = 1;
    GameSnapshotDiff game_snapshot_diff = 2;

    // When player movement is received from the client, send the updated
    //  player movement location (the actual target, taking terrain/collision
    //  into account) back to the client.
    PlayerMovement player_movement = 3;
  }
}

message GameServerActionsList {
  repeated GameServerSingleMessage messages = 1;
}

/*********************************************************
 * Union of all messages that a server can send to a client
 *********************************************************/
message GameServerMessage {
  // Magic number that verifies that this is a valid GameServerMessage
  uint32 magic_number = 1;
  float clock_time = 4;

  oneof msg_body {
    InitialConnectionResponse initial_connection_response = 2;
    GameServerActionsList actions_list = 3;
  }

  // Next ID: 5
}

/***********************************************************
 * Union of all messages that a client can send to a server
 **********************************************************/
message GameClientSingleMessage {
  oneof msg_body {
    // Raw input - where to go next? Direct from mouse click, do not
    //  factor in terrain/collision (let the server do that)
    PlayerMovement travel_to_location_request = 1;

    // Alert the server that the client has received a snapshot, and
    //  may now accept diffs that are based against any snapshot at
    //  least as recent as this one.
    SnapshotReceived snapshot_received = 2;
  }
}

message GameClientActionsList {
  repeated GameClientSingleMessage actions = 1;
}

message GameClientMessage {
  // Magic number that verifies that this is a valid GameClientMessage
  uint32 magic_header = 1;

  oneof msg_body {
    InitialConnectionRequest initial_connection_request = 2;
    GameClientActionsList game_client_actions_list = 3;
  }
}